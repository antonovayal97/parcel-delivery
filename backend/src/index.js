import express from "express";
import cors from "cors";
import helmet from "helmet";
import morgan from "morgan";
import rateLimit from "express-rate-limit";
import dotenv from "dotenv";
import { createClient } from "redis";
import { Pool } from "pg";

// –ò–º–ø–æ—Ä—Ç —Ä–æ—É—Ç–æ–≤
import authRoutes from "./routes/auth.js";
import userRoutes from "./routes/users.js";
import parcelRoutes from "./routes/parcelRequests.js";
import creditRoutes from "./routes/credits.js";
import adminStatsRouter from "./routes/adminStats.js";
import adminAuthRouter from "./routes/adminAuth.js";

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

const app = express();
const PORT = process.env.PORT || 8000;

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
const redisClient = createClient({
  url: process.env.REDIS_URL || "redis://localhost:6379",
});

redisClient.on("error", (err) => console.log("Redis Client Error", err));
redisClient.on("connect", () => console.log("Connected to Redis"));

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
const pool = new Pool({
  user: process.env.DB_USER || "postgres",
  host: process.env.DB_HOST || "localhost",
  database: process.env.DB_NAME || "parcel_delivery",
  password: process.env.DB_PASSWORD || "password",
  port: process.env.DB_PORT || 5432,
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö –Ω–∞–≥—Ä—É–∑–æ–∫
  max: parseInt(process.env.DB_POOL_MAX) || 50, // –ú–∞–∫—Å–∏–º—É–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  min: parseInt(process.env.DB_POOL_MIN) || 10, // –ú–∏–Ω–∏–º—É–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  idleTimeoutMillis: 30000, // 30 —Å–µ–∫—É–Ω–¥
  connectionTimeoutMillis: 2000, // 2 —Å–µ–∫—É–Ω–¥—ã
  acquireTimeoutMillis: 5000, // 5 —Å–µ–∫—É–Ω–¥
  reapIntervalMillis: 1000, // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
  createTimeoutMillis: 3000, // –¢–∞–π–º–∞—É—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  destroyTimeoutMillis: 5000, // –¢–∞–π–º–∞—É—Ç —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
});

// Middleware
app.use(helmet());
app.use(
  cors({
    origin: [
      process.env.FRONTEND_URL || "http://localhost:5173",
      "https://383c38297b01.ngrok-free.app",
      "https://3da717f601a7.ngrok-free.app",
    ],
    credentials: true,
  })
);
app.use(morgan("combined"));
app.use(express.json({ limit: "10mb" }));
app.use(express.urlencoded({ extended: true, limit: "10mb" }));

// Rate limiting –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö –Ω–∞–≥—Ä—É–∑–æ–∫
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
  max: parseInt(process.env.RATE_LIMIT_MAX) || 2000, // 2000 –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–¥–Ω–æ–≥–æ IP
  message: "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —ç—Ç–æ–≥–æ IP, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
  standardHeaders: true,
  legacyHeaders: false,
  skipSuccessfulRequests: false,
  skipFailedRequests: false,
});
app.use("/api/", limiter);

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î –∏ Redis
app.locals.pool = pool;
app.locals.redis = redisClient;

// –†–æ—É—Ç—ã
app.use("/api/auth", authRoutes);
app.use("/api/users", userRoutes);
app.use("/api/parcel-requests", parcelRoutes);
app.use("/api/credits", creditRoutes);
app.use("/api/admin", adminAuthRouter);
app.use("/api/admin", adminStatsRouter);

// Health check
app.get("/api/health", (req, res) => {
  res.json({
    status: "OK",
    timestamp: new Date().toISOString(),
    services: {
      database: "connected",
      redis: redisClient.isReady ? "connected" : "disconnected",
    },
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({
    message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
    error: process.env.NODE_ENV === "development" ? err.message : undefined,
  });
});

// 404 handler
app.use("*", (req, res) => {
  res.status(404).json({ message: "–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const startServer = async () => {
  try {
    await redisClient.connect();
    await pool.query("SELECT NOW()"); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î

    app.listen(PORT, () => {
      console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
      console.log(`üìä Health check: http://localhost:${PORT}/api/health`);
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", error);
    process.exit(1);
  }
};

startServer();

// Graceful shutdown
process.on("SIGTERM", async () => {
  console.log("–ü–æ–ª—É—á–µ–Ω SIGTERM, –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Ä–≤–µ—Ä–∞...");
  await redisClient.quit();
  await pool.end();
  process.exit(0);
});

process.on("SIGINT", async () => {
  console.log("–ü–æ–ª—É—á–µ–Ω SIGINT, –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Ä–≤–µ—Ä–∞...");
  await redisClient.quit();
  await pool.end();
  process.exit(0);
});

export default app;
