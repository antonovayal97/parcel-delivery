import { Pool } from "pg";
import dotenv from "dotenv";

dotenv.config();

const pool = new Pool({
  user: process.env.DB_USER || "postgres",
  host: process.env.DB_HOST || "localhost",
  database: process.env.DB_NAME || "parcel_delivery",
  password: process.env.DB_PASSWORD || "password",
  port: process.env.DB_PORT || 5432,
});

async function migrate() {
  try {
    console.log("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...");

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –∫—Ä–µ–¥–∏—Ç–∞–º–∏
    console.log("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã credit_transactions...");
    await pool.query(`
      CREATE TABLE IF NOT EXISTS credit_transactions (
        id SERIAL PRIMARY KEY,
        user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
        amount INTEGER NOT NULL,
        type VARCHAR(20) NOT NULL CHECK (type IN ('add', 'deduct', 'refund')),
        description TEXT,
        related_request_id INTEGER REFERENCES parcel_requests(id) ON DELETE SET NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);

    // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    console.log("üîç –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è credit_transactions...");
    await pool.query(`
      CREATE INDEX IF NOT EXISTS idx_credit_transactions_user_id ON credit_transactions(user_id);
      CREATE INDEX IF NOT EXISTS idx_credit_transactions_type ON credit_transactions(type);
      CREATE INDEX IF NOT EXISTS idx_credit_transactions_created_at ON credit_transactions(created_at);
    `);

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è –∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
    console.log("üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...");
    const existingUsers = await pool.query("SELECT id FROM users LIMIT 2");

    if (existingUsers.rows.length > 0) {
      console.log("üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...");
      const existingTransactions = await pool.query(
        "SELECT COUNT(*) FROM credit_transactions"
      );

      if (parseInt(existingTransactions.rows[0].count) === 0) {
        const userId1 = existingUsers.rows[0].id;
        const userId2 =
          existingUsers.rows.length > 1 ? existingUsers.rows[1].id : userId1;

        await pool.query(
          `
          INSERT INTO credit_transactions (user_id, amount, type, description) VALUES
            ($1, 50, 'add', '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'),
            ($2, 30, 'add', '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º');
        `,
          [userId1, userId2]
        );

        console.log(
          `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${existingUsers.rows.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`
        );
      }
    } else {
      console.log(
        "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã"
      );
    }

    console.log("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:", error);
    throw error;
  } finally {
    await pool.end();
  }
}

async function removeDimensionsColumn() {
  const { Pool } = await import("pg");
  const pool = new Pool({
    host: process.env.PGHOST || "postgres", // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Å–µ—Ä–≤–∏—Å–∞ Docker
    port: process.env.PGPORT || 5432,
    database: process.env.PGDATABASE || "parcel_delivery",
    user: process.env.PGUSER || "postgres",
    password: process.env.PGPASSWORD || "password", // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–∑ docker-compose
  });
  try {
    await pool.query(
      "ALTER TABLE parcel_requests DROP COLUMN IF EXISTS dimensions;"
    );
    console.log("‚úÖ –°—Ç–æ–ª–±–µ—Ü dimensions —É–¥–∞–ª—ë–Ω –∏–∑ parcel_requests");
  } catch (e) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–æ–ª–±—Ü–∞ dimensions:", e.message);
  } finally {
    await pool.end();
  }
}

if (import.meta.url === `file://${process.argv[1]}`) {
  removeDimensionsColumn();
}

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
migrate().catch((error) => {
  console.error("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏:", error);
  process.exit(1);
});
