import React, { useState, useEffect, useRef, useCallback } from 'react';
import { ParcelRequest } from '../types';
import { getCityById, getCitiesByCountry } from '../data/cities';
import { CustomSelect } from './CustomSelect';

interface AllRequestsProps {
  requests: ParcelRequest[];
  onAccept?: (requestId: string) => void;
  onCancel?: (requestId: string) => void;
  onDelete?: (requestId: string) => void;
  onLoadMore?: () => void;
  currentUserId?: string;
  loading?: boolean;
  hasMore?: boolean;
  loadingMore?: boolean;
}

export const AllRequests: React.FC<AllRequestsProps> = ({ 
  requests, 
  onAccept, 
  onCancel,
  onDelete,
  onLoadMore,
  currentUserId,
  loading = false,
  hasMore = false,
  loadingMore = false
}) => {
  const [filterRoute, setFilterRoute] = useState<'all' | 'from-russia' | 'from-thailand'>('all');
  const [filterCity, setFilterCity] = useState<string>('');
  const [filterType, setFilterType] = useState<'all' | 'send' | 'receive'>('all');

  const russianCities = getCitiesByCountry('russia');
  const thaiCities = getCitiesByCountry('thailand');

  const getStatusText = (status: ParcelRequest['status']) => {
    switch (status) {
      case 'pending': return '–û–∂–∏–¥–∞–µ—Ç';
      case 'accepted': return '–ü—Ä–∏–Ω—è—Ç–∞';
      case 'completed': return '–ó–∞–≤–µ—Ä—à–µ–Ω–∞';
      case 'cancelled': return '–û—Ç–º–µ–Ω–µ–Ω–∞';
      default: return status;
    }
  };

  const getStatusClass = (status: ParcelRequest['status']) => {
    switch (status) {
      case 'pending': return 'status-badge status-pending';
      case 'accepted': return 'status-badge status-accepted';
      case 'completed': return 'status-badge status-completed';
      case 'cancelled': return 'status-badge status-cancelled';
      default: return 'status-badge bg-gray-100 text-gray-800';
    }
  };

  const getTypeClass = (type: ParcelRequest['type']) => {
    switch (type) {
      case 'send': return 'type-badge type-send';
      case 'receive': return 'type-badge type-receive';
      default: return 'type-badge bg-gray-100 text-gray-800';
    }
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞—è–≤–æ–∫
  const filteredRequests = requests.filter(request => {
    // –ò—Å–∫–ª—é—á–∞–µ–º –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –∏–∑ –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
    if (request.status === 'cancelled' || request.status === 'completed') return false;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ (pending –∏ accepted)
    if (request.status !== 'pending' && request.status !== 'accepted') return false;
    
    // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É
    if (filterType !== 'all' && request.type !== filterType) return false;
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –º–∞—Ä—à—Ä—É—Ç—É
    if (filterRoute !== 'all') {
      {/* @ts-expect-error: –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º snake_case –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å API */}
      const fromCity = getCityById(request.from_city || request.fromCity);
      
      if (filterRoute === 'from-russia') {
        if (fromCity?.country !== 'russia') return false;
      } else if (filterRoute === 'from-thailand') {
        if (fromCity?.country !== 'thailand') return false;
      }
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ä–æ–¥—É
    if (filterCity) {
      {/* @ts-expect-error: –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º snake_case –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å API */}
      const fromCity = getCityById(request.from_city || request.fromCity);
      {/* @ts-expect-error: –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º snake_case –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å API */}
      const toCity = getCityById(request.to_city || request.toCity);
      
      if (fromCity?.id !== filterCity && toCity?.id !== filterCity) return false;
    }
    
    return true;
  });

  const availableCities = filterRoute === 'from-russia' ? russianCities : 
                         filterRoute === 'from-thailand' ? thaiCities : 
                         [...russianCities, ...thaiCities];

  const listRef = useRef<HTMLDivElement>(null);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫—Ä–æ–ª–ª–∞ –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
  const handleScroll = useCallback(() => {
    if (!listRef.current || loadingMore || !hasMore) return;
    const { scrollTop, scrollHeight, clientHeight } = listRef.current;
    // –ï—Å–ª–∏ –ø—Ä–æ–∫—Ä—É—Ç–∏–ª–∏ –¥–æ 90% —Å–ø–∏—Å–∫–∞ ‚Äî –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –µ—â–µ
    if (scrollTop + clientHeight >= scrollHeight - 100) {
      if (onLoadMore) onLoadMore();
    }
  }, [loadingMore, hasMore, onLoadMore]);

  useEffect(() => {
    const ref = listRef.current;
    if (!ref) return;
    ref.addEventListener('scroll', handleScroll);
    return () => {
      ref.removeEventListener('scroll', handleScroll);
    };
  }, [handleScroll]);

  if (loading) {
    return (
      <div className="card">
        <p className="text-center text-tg-hint">–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–æ–∫...</p>
      </div>
    );
  }

  if (requests.length === 0) {
    return (
      <div className="card">
        <p className="text-center text-tg-hint">
          –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞—è–≤–æ–∫
        </p>
      </div>
    );
  }

  return (
    <div className="space-y-4">
        {/* –§–∏–ª—å—Ç—Ä—ã */}
      <div className="card mb-4">
        <h4 className="mb-3 font-medium">üîç –§–∏–ª—å—Ç—Ä—ã</h4>
        
        <div className="form-group">
          <label className="form-label">–¢–∏–ø –∑–∞—è–≤–∫–∏</label>
          <div className="tabs">
            <div 
              className={`tab ${filterType === 'all' ? 'active' : ''}`}
              onClick={() => setFilterType('all')}
            >
              –í—Å–µ
            </div>
            <div 
              className={`tab ${filterType === 'send' ? 'active' : ''}`}
              onClick={() => setFilterType('send')}
            >
              –û—Ç–ø—Ä–∞–≤–∫–∞
            </div>
            <div 
              className={`tab ${filterType === 'receive' ? 'active' : ''}`}
              onClick={() => setFilterType('receive')}
            >
              –î–æ—Å—Ç–∞–≤–∫–∞
            </div>
          </div>
        </div>

        <div className="form-group">
          <label className="form-label">–ú–∞—Ä—à—Ä—É—Ç</label>
          <div className="tabs">
            <div 
              className={`tab ${filterRoute === 'all' ? 'active' : ''}`}
              onClick={() => {
                setFilterRoute('all');
                setFilterCity('');
              }}
            >
              –í—Å–µ
            </div>
            <div 
              className={`tab ${filterRoute === 'from-russia' ? 'active' : ''}`}
              onClick={() => {
                setFilterRoute('from-russia');
                setFilterCity('');
              }}
            >
              –ò–∑ –†–æ—Å—Å–∏–∏
            </div>
            <div 
              className={`tab ${filterRoute === 'from-thailand' ? 'active' : ''}`}
              onClick={() => {
                setFilterRoute('from-thailand');
                setFilterCity('');
              }}
            >
              –ò–∑ –¢–∞–∏–ª–∞–Ω–¥–∞
            </div>
          </div>
        </div>

        <div className="form-group">
          <label className="form-label">–ì–æ—Ä–æ–¥</label>
          <CustomSelect
            options={[
              { value: '', label: '–í—Å–µ –≥–æ—Ä–æ–¥–∞' },
              ...availableCities.map(city => ({
                value: city.id,
                label: city.name
              }))
            ]}
            value={filterCity}
            onChange={setFilterCity}
            placeholder="–í—Å–µ –≥–æ—Ä–æ–¥–∞"
          />
        </div>

        <div className="text-sm text-tg-hint text-center mt-3">
          –ù–∞–π–¥–µ–Ω–æ: {filteredRequests.length} –∑–∞—è–≤–æ–∫
          {requests.length > filteredRequests.length && (
            <span className="block text-xs">
              –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {requests.length} –∏–∑ {filteredRequests.length + (hasMore ? '...' : '')}
            </span>
          )}
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ */}
      {filteredRequests.length === 0 ? (
        <div className="card">
          <p className="text-center text-tg-hint">
            –ü–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º –∑–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
          </p>
        </div>
      ) : (
        <div
          className="space-y-4"
          ref={listRef}
        >
          {filteredRequests.map((request) => {
            // @ts-expect-error: –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º snake_case –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å API
            console.log('user_id:', request.user_id, 'userId:', request.userId, 'currentUserId:', currentUserId);
            {/* @ts-expect-error: –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º snake_case –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å API */}
            const fromCity = getCityById(request.from_city || request.fromCity);
            {/* @ts-expect-error: –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º snake_case –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å API */}
            const toCity = getCityById(request.to_city || request.toCity);
            
            return (
              <div key={request.id} className="card">
                <div className="flex justify-between items-center mb-3">
                  <span className={getTypeClass(request.type)}>
                    {request.type === 'send' ? '–û—Ç–ø—Ä–∞–≤–∫–∞' : '–î–æ—Å—Ç–∞–≤–∫–∞'}
                  </span>
                  <span className={getStatusClass(request.status)}>
                    {getStatusText(request.status)}
                  </span>
                </div>

                <div className="mb-2">
                  <strong>–ú–∞—Ä—à—Ä—É—Ç:</strong> {(fromCity?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} ‚Üí {(toCity?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
                </div>

                <div className="mb-2">
                  <strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> {request.description}
                </div>

                <div className="mb-2">
                  <strong>–í–µ—Å:</strong> {request.weight} –∫–≥
                  
                </div>

                <div className="text-xs text-tg-hint mb-3">
                  {/* @ts-expect-error: –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º snake_case –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å API */}
                  –°–æ–∑–¥–∞–Ω–æ: {isNaN(new Date(request.created_at || request.createdAt).getTime()) ? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' : new Date(request.created_at || request.createdAt).toLocaleDateString('ru-RU')}
                </div>

                {request.status === 'pending' && (
                  <div className="flex gap-2">
                    {/* –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ–≥–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π */}
                    {/* @ts-expect-error: –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º snake_case –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å API */}
                    {String(request.user_id || request.userId) === String(currentUserId) ? (
                      // –ï—Å–ª–∏ —ç—Ç–æ —Å–≤–æ—è –∑–∞—è–≤–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
                      onDelete && (
                        <button 
                          className="btn btn-danger flex-1" 
                          onClick={() => onDelete(request.id)}
                        >
                          –£–¥–∞–ª–∏—Ç—å
                        </button>
                      )
                    ) : (
                      // –ï—Å–ª–∏ —ç—Ç–æ —á—É–∂–∞—è –∑–∞—è–≤–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏–Ω—è—Ç–∏—è
                      onAccept && (
                        <button 
                          className="btn flex-1" 
                          onClick={() => onAccept(request.id)}
                        >
                          –ó–∞–≤–µ—Ä—à–∏—Ç—å
                        </button>
                      )
                    )}
                    {/* –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∏—Ç—å" –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–≤–æ–∏—Ö –∑–∞—è–≤–æ–∫ */}
                    {/* @ts-expect-error: –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º snake_case –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å API */}
                    {request.status === 'pending' && String(request.user_id || request.userId) === String(currentUserId) && onCancel && (
                      <button 
                        className="btn btn-secondary flex-1" 
                        onClick={() => onCancel(request.id)}
                      >
                        –û—Ç–º–µ–Ω–∏—Ç—å
                      </button>
                    )}
                  </div>
                )}

                {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ */}
                {request.status === 'cancelled' && (
                  <div className="text-sm text-tg-hint text-center">
                    –ó–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞
                  </div>
                )}

                {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ */}
                {request.status === 'completed' && (
                  <div className="text-sm text-status-completed-text text-center">
                    –ó–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                  </div>
                )}
              </div>
            );
          })}
        </div>
      )}

      {/* –ö–Ω–æ–ø–∫–∞ "–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ" –∫–∞–∫ fallback */}
      {hasMore && (
        <div className="text-center mt-4">
          <button
            onClick={onLoadMore}
            disabled={loadingMore}
            className="btn btn-secondary"
          >
            {loadingMore ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ'}
          </button>
        </div>
      )}
    </div>
  );
}; 